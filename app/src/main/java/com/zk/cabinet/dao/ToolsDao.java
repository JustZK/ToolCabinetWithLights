package com.zk.cabinet.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zk.cabinet.bean.Tools;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Tools".
*/
public class ToolsDao extends AbstractDao<Tools, Long> {

    public static final String TABLENAME = "Tools";

    /**
     * Properties of entity Tools.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property ToolName = new Property(1, String.class, "toolName", false, "ToolName");
        public final static Property Epc = new Property(2, String.class, "epc", false, "EPC");
        public final static Property CellNumber = new Property(3, int.class, "cellNumber", false, "CellNumber");
        public final static Property ToolState = new Property(4, int.class, "toolState", false, "ToolState");
        public final static Property ToolLightNumber = new Property(5, int.class, "toolLightNumber", false, "ToolLightNumber");
        public final static Property Borrower = new Property(6, String.class, "borrower", false, "Borrower");
    }


    public ToolsDao(DaoConfig config) {
        super(config);
    }
    
    public ToolsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Tools\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ToolName\" TEXT," + // 1: toolName
                "\"EPC\" TEXT UNIQUE ," + // 2: epc
                "\"CellNumber\" INTEGER NOT NULL ," + // 3: cellNumber
                "\"ToolState\" INTEGER NOT NULL ," + // 4: toolState
                "\"ToolLightNumber\" INTEGER NOT NULL ," + // 5: toolLightNumber
                "\"Borrower\" TEXT);"); // 6: borrower
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Tools\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Tools entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String toolName = entity.getToolName();
        if (toolName != null) {
            stmt.bindString(2, toolName);
        }
 
        String epc = entity.getEpc();
        if (epc != null) {
            stmt.bindString(3, epc);
        }
        stmt.bindLong(4, entity.getCellNumber());
        stmt.bindLong(5, entity.getToolState());
        stmt.bindLong(6, entity.getToolLightNumber());
 
        String borrower = entity.getBorrower();
        if (borrower != null) {
            stmt.bindString(7, borrower);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Tools entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String toolName = entity.getToolName();
        if (toolName != null) {
            stmt.bindString(2, toolName);
        }
 
        String epc = entity.getEpc();
        if (epc != null) {
            stmt.bindString(3, epc);
        }
        stmt.bindLong(4, entity.getCellNumber());
        stmt.bindLong(5, entity.getToolState());
        stmt.bindLong(6, entity.getToolLightNumber());
 
        String borrower = entity.getBorrower();
        if (borrower != null) {
            stmt.bindString(7, borrower);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Tools readEntity(Cursor cursor, int offset) {
        Tools entity = new Tools( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // toolName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // epc
            cursor.getInt(offset + 3), // cellNumber
            cursor.getInt(offset + 4), // toolState
            cursor.getInt(offset + 5), // toolLightNumber
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // borrower
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Tools entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setToolName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEpc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCellNumber(cursor.getInt(offset + 3));
        entity.setToolState(cursor.getInt(offset + 4));
        entity.setToolLightNumber(cursor.getInt(offset + 5));
        entity.setBorrower(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Tools entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Tools entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Tools entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
